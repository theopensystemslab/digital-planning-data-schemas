import {ApplicationData} from './data/ApplicationData';
import {ProposalBase} from './data/Proposal';
import {User} from './data/User';
import {
  ApplicationType,
  PAApplicationType,
  PPApplicationType,
  PrimaryApplicationType,
  WTTApplicationType,
} from './enums/ApplicationType';

/**
 * @internal
 * The generic base type for all applications
 * Takes a primary and granular application type which allows child properties to differ based on these inputs
 * Deriving `TPrimary` from `TGranular` is possible in TS, but not in a way which is currently compatible with ts-json-schema-generator
 */
interface ApplicationSpecification<
  TPrimary extends PrimaryApplicationType,
  TGranular extends ApplicationType,
> {
  applicationType: TGranular;
  data: {
    user: User<TPrimary>;
    application: ApplicationData<TPrimary>;
    proposal: ProposalBase;
  };
}

export type PPApplication = ApplicationSpecification<'pp', PPApplicationType>;

export type PAApplication = ApplicationSpecification<'pa', PAApplicationType>;

export type WTTApplication = ApplicationSpecification<
  'wtt',
  WTTApplicationType
>;

/**
 * @title PrototypeApplication
 * @description
 * The root specification for a planning application in England generated by a digital planning service (prototype)
 */
export type PrototypeApplication =
  | PPApplication
  | PAApplication
  | WTTApplication;
// TODO: All the rest!

// const test: App = {
//   applicationType: 'wtt',
//   data: {
//     user: {
//       role: 'agent',
//       wttSpecificProperty: true,
//     },
//     application: {
//       wttSpecificProperty: 123,
//       somethingShared: 'abc',
//     },
//   },
// };
